/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/policy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiClusterStatefulSetLister helps list MultiClusterStatefulSets.
// All objects returned here must be treated as read-only.
type MultiClusterStatefulSetLister interface {
	// List lists all MultiClusterStatefulSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterStatefulSet, err error)
	// MultiClusterStatefulSets returns an object that can list and get MultiClusterStatefulSets.
	MultiClusterStatefulSets(namespace string) MultiClusterStatefulSetNamespaceLister
	MultiClusterStatefulSetListerExpansion
}

// multiClusterStatefulSetLister implements the MultiClusterStatefulSetLister interface.
type multiClusterStatefulSetLister struct {
	indexer cache.Indexer
}

// NewMultiClusterStatefulSetLister returns a new MultiClusterStatefulSetLister.
func NewMultiClusterStatefulSetLister(indexer cache.Indexer) MultiClusterStatefulSetLister {
	return &multiClusterStatefulSetLister{indexer: indexer}
}

// List lists all MultiClusterStatefulSets in the indexer.
func (s *multiClusterStatefulSetLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterStatefulSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterStatefulSet))
	})
	return ret, err
}

// MultiClusterStatefulSets returns an object that can list and get MultiClusterStatefulSets.
func (s *multiClusterStatefulSetLister) MultiClusterStatefulSets(namespace string) MultiClusterStatefulSetNamespaceLister {
	return multiClusterStatefulSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiClusterStatefulSetNamespaceLister helps list and get MultiClusterStatefulSets.
// All objects returned here must be treated as read-only.
type MultiClusterStatefulSetNamespaceLister interface {
	// List lists all MultiClusterStatefulSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterStatefulSet, err error)
	// Get retrieves the MultiClusterStatefulSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiClusterStatefulSet, error)
	MultiClusterStatefulSetNamespaceListerExpansion
}

// multiClusterStatefulSetNamespaceLister implements the MultiClusterStatefulSetNamespaceLister
// interface.
type multiClusterStatefulSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiClusterStatefulSets in the indexer for a given namespace.
func (s multiClusterStatefulSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterStatefulSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterStatefulSet))
	})
	return ret, err
}

// Get retrieves the MultiClusterStatefulSet from the indexer for a given namespace and name.
func (s multiClusterStatefulSetNamespaceLister) Get(name string) (*v1alpha1.MultiClusterStatefulSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiclusterstatefulset"), name)
	}
	return obj.(*v1alpha1.MultiClusterStatefulSet), nil
}
